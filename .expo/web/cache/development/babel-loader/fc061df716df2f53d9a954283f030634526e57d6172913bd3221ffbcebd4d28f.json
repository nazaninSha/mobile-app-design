{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { ButtomContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    console.log(\"show add person...\");\n  }\n  function displayPeople() {\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemButton,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsxs(ButtomContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"info\",\n            type: \"major\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButton\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButton\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButton\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","Settings","RoiGetPeople","PopupOk","TextParagraph","TextH1","TextH2","Styles","MyButton","ButtomContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","displayPeople","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemButton","name","department","phone","direction","text","type","size","buttonStyle","textStyle","id","safeAreaView","personButtonContainer","onPress","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/project1/mobile-app-design/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport { View, ScrollView } from 'react-native';\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\n\r\n// Import helper code\r\nimport Settings from '../constants/Settings';\r\nimport { RoiGetPeople } from '../utils/RoiApi';\r\nimport { PopupOk } from \"../utils/Popup\";\r\n\r\n// Import styling and components\r\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\r\nimport Styles from \"../styles/MainStyle\";\r\nimport { MyButton } from '../components/MyButton';\r\nimport {ButtomContainer} from '../components/ButtonContainer';\r\n\r\nexport default function ViewPeopleScreen(props) {\r\n\r\n  // State - data for this component\r\n\r\n  // Data array, default to empty array\r\n  const [people, setPeople] = React.useState([])\r\n\r\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\r\n  // \"effectful\" code is something that triggers a UI re-render\r\n  React.useEffect(refreshPersonList, [])\r\n\r\n  // Refresh the person list data - call the API\r\n  function refreshPersonList() {\r\n\r\n    console.log(\"refresh person list\")\r\n\r\n    // Get data from the API\r\n    RoiGetPeople()\r\n      // Success\r\n      .then(data => {\r\n        // Store results in state variable\r\n        setPeople(data)\r\n      })\r\n      // Error\r\n      .catch(error => {\r\n        PopupOk(\"API Error\", \"Could not get people from the server\")\r\n      })\r\n\r\n  }\r\n\r\n  \r\n  function showAddPerson() {\r\n    \r\n    console.log(\"show add person...\")\r\n\r\n  }\r\n  \r\n\r\n  // Display all people data\r\n  function displayPeople() {\r\n    \r\n    // Loop through each item and turn into appropriate output and then return the result\r\n    return people.map(p => {\r\n\r\n      // Create an output view for each item\r\n      return (\r\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\r\n          <View style={Styles.personListItemButton}>\r\n            <TextParagraph>{p.name}</TextParagraph>\r\n            <TextParagraph>{p.department?.name ?? '---'}</TextParagraph>\r\n            <TextParagraph>{p.phone}</TextParagraph>\r\n          </View>\r\n          <ButtomContainer direction=\"column\">\r\n              <MyButton\r\n              text= \"info\"\r\n              type= \"major\"\r\n              size= \"small\"\r\n              buttonStyle= {Styles.personListItemButton}\r\n              textStyle= {Styles.personListItemButton}\r\n              />\r\n              <MyButton\r\n              text= \"Edit\"\r\n              type= \"default\"\r\n              size= \"small\"\r\n              buttonStyle= {Styles.personListItemButton}\r\n              textStyle= {Styles.personListItemButton}\r\n              />\r\n              <MyButton\r\n              text= \"Delete\"\r\n              type= \"default\"\r\n              size= \"small\"\r\n              buttonStyle= {Styles.personListItemButton}\r\n              textStyle= {Styles.personListItemButton}\r\n              />\r\n          </ButtomContainer>\r\n        </View>\r\n      )\r\n\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  // Main output of the screen component\r\n  return (\r\n    <SafeAreaView style={Styles.safeAreaView}>\r\n      \r\n      <View style={Styles.personButtonContainer}>\r\n        <MyButton \r\n          text=\"+ Add new person\"\r\n          type=\"major\"      // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={showAddPerson}\r\n        />\r\n        <MyButton \r\n          text=\"Refresh\"\r\n          type=\"default\"    // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={refreshPersonList}\r\n        />\r\n      </View>\r\n      \r\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\r\n          \r\n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\r\n\r\n        <View>\r\n          {displayPeople()}\r\n        </View>\r\n\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAE/B,SAASC,YAAY,QAAQ,gCAAgC;AAG7D,OAAOC,QAAQ;AACf,SAASC,YAAY;AACrB,SAASC,OAAO;AAGhB,SAASC,aAAa,EAAEC,MAAM,EAAEC,MAAM;AACtC,OAAOC,MAAM;AACb,SAASC,QAAQ;AACjB,SAAQC,eAAe;AAAuC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9D,eAAe,SAASC,gBAAgBA,CAACC,KAAK,EAAE;EAK9C,IAAAC,eAAA,GAA4BnB,KAAK,CAACoB,QAAQ,CAAC,EAAE,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAvCI,MAAM,GAAAF,gBAAA;IAAEG,SAAS,GAAAH,gBAAA;EAIxBrB,KAAK,CAACyB,SAAS,CAACC,iBAAiB,EAAE,EAAE,CAAC;EAGtC,SAASA,iBAAiBA,CAAA,EAAG;IAE3BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAGlCvB,YAAY,CAAC,CAAC,CAEXwB,IAAI,CAAC,UAAAC,IAAI,EAAI;MAEZN,SAAS,CAACM,IAAI,CAAC;IACjB,CAAC,CAAC,CAEDC,KAAK,CAAC,UAAAC,KAAK,EAAI;MACd1B,OAAO,CAAC,WAAW,EAAE,sCAAsC,CAAC;IAC9D,CAAC,CAAC;EAEN;EAGA,SAAS2B,aAAaA,CAAA,EAAG;IAEvBN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EAEnC;EAIA,SAASM,aAAaA,CAAA,EAAG;IAGvB,OAAOX,MAAM,CAACY,GAAG,CAAC,UAAAC,CAAC,EAAI;MAAA,IAAAC,kBAAA,EAAAC,aAAA;MAGrB,OACEtB,KAAA,CAACf,IAAI;QAAYsC,KAAK,EAAE7B,MAAM,CAAC8B,uBAAwB;QAAAC,QAAA,GACrDzB,KAAA,CAACf,IAAI;UAACsC,KAAK,EAAE7B,MAAM,CAACgC,oBAAqB;UAAAD,QAAA,GACvC3B,IAAA,CAACP,aAAa;YAAAkC,QAAA,EAAEL,CAAC,CAACO;UAAI,CAAgB,CAAC,EACvC7B,IAAA,CAACP,aAAa;YAAAkC,QAAA,GAAAJ,kBAAA,IAAAC,aAAA,GAAEF,CAAC,CAACQ,UAAU,qBAAZN,aAAA,CAAcK,IAAI,YAAAN,kBAAA,GAAI;UAAK,CAAgB,CAAC,EAC5DvB,IAAA,CAACP,aAAa;YAAAkC,QAAA,EAAEL,CAAC,CAACS;UAAK,CAAgB,CAAC;QAAA,CACpC,CAAC,EACP7B,KAAA,CAACJ,eAAe;UAACkC,SAAS,EAAC,QAAQ;UAAAL,QAAA,GAC/B3B,IAAA,CAACH,QAAQ;YACToC,IAAI,EAAE,MAAM;YACZC,IAAI,EAAE,OAAO;YACbC,IAAI,EAAE,OAAO;YACbC,WAAW,EAAGxC,MAAM,CAACgC,oBAAqB;YAC1CS,SAAS,EAAGzC,MAAM,CAACgC;UAAqB,CACvC,CAAC,EACF5B,IAAA,CAACH,QAAQ;YACToC,IAAI,EAAE,MAAM;YACZC,IAAI,EAAE,SAAS;YACfC,IAAI,EAAE,OAAO;YACbC,WAAW,EAAGxC,MAAM,CAACgC,oBAAqB;YAC1CS,SAAS,EAAGzC,MAAM,CAACgC;UAAqB,CACvC,CAAC,EACF5B,IAAA,CAACH,QAAQ;YACToC,IAAI,EAAE,QAAQ;YACdC,IAAI,EAAE,SAAS;YACfC,IAAI,EAAE,OAAO;YACbC,WAAW,EAAGxC,MAAM,CAACgC,oBAAqB;YAC1CS,SAAS,EAAGzC,MAAM,CAACgC;UAAqB,CACvC,CAAC;QAAA,CACW,CAAC;MAAA,GA5BTN,CAAC,CAACgB,EA6BP,CAAC;IAGX,CAAC,CAAC;EAEJ;EAIA,OACEpC,KAAA,CAACb,YAAY;IAACoC,KAAK,EAAE7B,MAAM,CAAC2C,YAAa;IAAAZ,QAAA,GAEvCzB,KAAA,CAACf,IAAI;MAACsC,KAAK,EAAE7B,MAAM,CAAC4C,qBAAsB;MAAAb,QAAA,GACxC3B,IAAA,CAACH,QAAQ;QACPoC,IAAI,EAAC,kBAAkB;QACvBC,IAAI,EAAC,OAAO;QACZC,IAAI,EAAC,OAAO;QACZM,OAAO,EAAEtB;MAAc,CACxB,CAAC,EACFnB,IAAA,CAACH,QAAQ;QACPoC,IAAI,EAAC,SAAS;QACdC,IAAI,EAAC,SAAS;QACdC,IAAI,EAAC,OAAO;QACZM,OAAO,EAAE7B;MAAkB,CAC5B,CAAC;IAAA,CACE,CAAC,EAEPV,KAAA,CAACd,UAAU;MAACqC,KAAK,EAAE7B,MAAM,CAAC8C,SAAU;MAACC,qBAAqB,EAAE/C,MAAM,CAACgD,gBAAiB;MAAAjB,QAAA,GAElF3B,IAAA,CAACN,MAAM;QAAC+B,KAAK,EAAE;UAACoB,SAAS,EAAC;QAAC,CAAE;QAAAlB,QAAA,EAAC;MAAkB,CAAQ,CAAC,EAEzD3B,IAAA,CAACb,IAAI;QAAAwC,QAAA,EACFP,aAAa,CAAC;MAAC,CACZ,CAAC;IAAA,CAEG,CAAC;EAAA,CACD,CAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}